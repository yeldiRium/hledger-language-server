{"author":{"id":"317fe6d5878eba3d5c4676570247e7d1f041030ee2809554c49b5ee9d04f5e98"},"ops":[{"type":1,"timestamp":1748095036,"nonce":"fvkW4c1qRzvLbbMCoX30ObSO6dc=","title":"Rethink file evaluation","message":"Currently files are evaluated by inlining imported files and then iterating over all entries.\nThis makes it hard to keep references to file contents, since inlining the imported files changes the AST.\nWith participle this hasn't been a problem, since the nodes contain metadata about their origin.\nWith treesitter this will probably not work, since the AST can only be modified by modifying the underlying text and inlining imports into the text breaks the mapping of later nodes to the text.\n\nSo all analyses on AST should not rely on imports being inlined beforehand.\nInstead analyses should receive an AST and an abstraction to load further files into ASTs.\nThey should then iterate over an AST and when they encounter an import they should switch to that file's AST.\nAfterwards they should resume with the previous AST.\n\nThis should probably be wrapped in some kind of abstraction.","files":null}]}